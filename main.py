import discord
from discord.ext import commands, tasks
from discord import app_commands
from discord.ui import Modal, TextInput, View, Button
from datetime import datetime, timedelta, timezone
import os
import re
import asyncio
import json

# -------- Intents --------
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree

# -------- Configs --------
CONFIG_FILE = "auction_config.json"
AUCTION_FILE = "auctions.json"

config = {
    "setup_channel_id": None,
    "auction_channel_id": None,
}

draft = {
    "title": None,
    "description": None,
    "color": 0x00ff00,
    "footer": None,
    "thumbnail": None,
    "image": None,
    "min_bid": 10000,
    "end_time": None
}

auctions = {}  # message_id -> auction data

# -------- Data Persistence --------
def load_config():
    global config
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            config = json.load(f)
    except FileNotFoundError:
        save_config()

def save_config():
    with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2)

def load_auctions():
    global auctions
    try:
        with open(AUCTION_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            for msg_id, auction in data.items():
                auction["end_time"] = datetime.fromisoformat(auction["end_time"])
                auctions[int(msg_id)] = auction
    except FileNotFoundError:
        pass

def save_auctions():
    data = {}
    for msg_id, auction in auctions.items():
        auction_copy = auction.copy()
        auction_copy["end_time"] = auction["end_time"].isoformat()
        data[str(msg_id)] = auction_copy
    with open(AUCTION_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2)

# -------- Helpers --------
def parse_time_input(text: str) -> datetime:
    """‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ"""
    text = re.sub(r'^(‡∏ñ‡∏∂‡∏á\s*)', '', text.strip())
    
    formats = [
        "%Y-%m-%d %H:%M",
        "%d-%m-%Y %H:%M",
        "%H:%M"
    ]
    
    for fmt in formats:
        try:
            t = datetime.strptime(text, fmt)
            if fmt == "%H:%M":
                now = datetime.now(timezone.utc)
                dt = datetime(now.year, now.month, now.day, t.hour, t.minute, tzinfo=timezone.utc)
                if dt <= now:
                    dt += timedelta(days=1)
                return dt
            else:
                return t.replace(tzinfo=timezone.utc)
        except ValueError:
            continue
    
    raise ValueError("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ: 'HH:MM' ‡∏´‡∏£‡∏∑‡∏≠ 'YYYY-MM-DD HH:MM'")

def build_embed_preview():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"""
    e = discord.Embed(
        title=draft["title"] or "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
        description=draft["description"] or "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢",
        color=draft["color"]
    )
    
    if draft.get("thumbnail"):
        e.set_thumbnail(url=draft["thumbnail"])
    if draft.get("image"):
        e.set_image(url=draft["image"])
    if draft.get("footer"):
        e.set_footer(text=draft["footer"])
    if draft.get("end_time"):
        e.add_field(
            name="‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", 
            value=f"<t:{int(draft['end_time'].timestamp())}:F>",
            inline=False
        )
    e.add_field(name="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥", value=f"{draft.get('min_bid', 0):,} ‡∏ö‡∏≤‡∏ó", inline=False)
    
    return e

# -------- Modal for Basic Info (5 fields max) --------
class BasicInfoModal(Modal):
    def __init__(self):
        super().__init__(title="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• (1/2)")
        self.title_input = TextInput(label="‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", required=True, max_length=100)
        self.desc_input = TextInput(
            label="‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢", 
            style=discord.TextStyle.paragraph, 
            required=True,
            max_length=1024
        )
        self.hex_input = TextInput(
            label="‡∏™‡∏µ Hex", 
            placeholder="#00ff00", 
            required=False,
            max_length=7
        )
        self.minbid_input = TextInput(
            label="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥", 
            placeholder="10000", 
            required=True,
            max_length=10
        )
        self.endtime_input = TextInput(
            label="‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î", 
            placeholder="12:00 ‡∏´‡∏£‡∏∑‡∏≠ 2025-10-30 15:20",
            required=True
        )
        
        for item in [self.title_input, self.desc_input, self.hex_input, 
                     self.minbid_input, self.endtime_input]:
            self.add_item(item)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            # Validate color
            if self.hex_input.value:
                draft["color"] = int(self.hex_input.value.lstrip("#"), 16)
            
            # Validate bid
            draft["min_bid"] = int(re.sub(r'[^\d]', '', self.minbid_input.value))
            if draft["min_bid"] <= 0:
                raise ValueError("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")
            
            # Validate time
            draft["end_time"] = parse_time_input(self.endtime_input.value)
            if draft["end_time"] <= datetime.now(timezone.utc):
                raise ValueError("‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï")
            
            draft["title"] = self.title_input.value
            draft["description"] = self.desc_input.value
            
            await interaction.response.send_message(
                "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß! ‡πÉ‡∏ä‡πâ `/‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)",
                embed=build_embed_preview(),
                ephemeral=True
            )
            
        except ValueError as e:
            await interaction.response.send_message(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}", ephemeral=True)

# -------- Modal for Images --------
class ImageModal(Modal):
    def __init__(self):
        super().__init__(title="‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (2/2)")
        self.footer_input = TextInput(label="Footer", required=False, max_length=100)
        self.thumb_input = TextInput(label="Thumbnail URL", required=False)
        self.image_input = TextInput(label="Main Image URL", required=False)
        
        for item in [self.footer_input, self.thumb_input, self.image_input]:
            self.add_item(item)

    async def on_submit(self, interaction: discord.Interaction):
        draft["footer"] = self.footer_input.value or None
        draft["thumbnail"] = self.thumb_input.value or None
        draft["image"] = self.image_input.value or None
        
        await interaction.response.send_message(
            "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß!",
            embed=build_embed_preview(),
            ephemeral=True
        )

# -------- Modal for Bidding --------
class BidModal(Modal):
    def __init__(self, msg_id):
        super().__init__(title="‡πÉ‡∏™‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•")
        self.msg_id = msg_id
        self.price_input = TextInput(
            label="‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)", 
            placeholder="15000", 
            required=True,
            max_length=10
        )
        self.add_item(self.price_input)

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        
        if self.msg_id not in auctions:
            await interaction.followup.send("‚ùå ‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏à‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
            return
        
        auction = auctions[self.msg_id]
        
        # Check if auction ended
        if datetime.now(timezone.utc) >= auction["end_time"]:
            await interaction.followup.send("‚ùå ‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
            return
        
        try:
            bid = int(re.sub(r'[^\d]', '', self.price_input.value))
        except ValueError:
            await interaction.followup.send("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True)
            return
        
        if bid < auction["min_bid"]:
            await interaction.followup.send(
                f"‚ùå ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ {auction['min_bid']:,} ‡∏ö‡∏≤‡∏ó",
                ephemeral=True
            )
            return
        
        if bid <= auction["highest_bid"]:
            await interaction.followup.send(
                f"‚ùå ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ {auction['highest_bid']:,} ‡∏ö‡∏≤‡∏ó",
                ephemeral=True
            )
            return
        
        # Update auction
        auction["highest_bid"] = bid
        auction["highest_user"] = interaction.user.mention
        auction["highest_user_id"] = interaction.user.id
        save_auctions()
        
        # Update embed
        channel = bot.get_channel(auction["channel_id"])
        try:
            msg = await channel.fetch_message(self.msg_id)
            embed = msg.embeds[0]
            embed.clear_fields()
            embed.add_field(
                name="üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡∏≥",
                value=f"{auction['highest_bid']:,} ‡∏ö‡∏≤‡∏ó ‡πÇ‡∏î‡∏¢ {auction['highest_user']}",
                inline=False
            )
            embed.add_field(
                name="‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î",
                value=f"<t:{int(auction['end_time'].timestamp())}:R>",
                inline=False
            )
            await msg.edit(embed=embed)
        except discord.NotFound:
            await interaction.followup.send("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•", ephemeral=True)
            return
        except discord.HTTPException as e:
            print(f"Error updating embed: {e}")
        
        await interaction.followup.send(
            f"‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: {bid:,} ‡∏ö‡∏≤‡∏ó",
            ephemeral=True
        )

# -------- Persistent View for Auction --------
class AuctionView(View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(
        label="‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏° üí∞",
        style=discord.ButtonStyle.green,
        custom_id="auction_bid_button"
    )
    async def bid_button(self, interaction: discord.Interaction, button: Button):
        msg_id = interaction.message.id
        
        if msg_id not in auctions:
            await interaction.response.send_message(
                "‚ùå ‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏à‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß",
                ephemeral=True
            )
            return
        
        await interaction.response.send_modal(BidModal(msg_id))

# -------- Slash Commands --------
@tree.command(name="set_setup_channel", description="‡∏ï‡∏±‡πâ‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ã‡πá‡∏ï‡∏ö‡∏≠‡∏ó")
@app_commands.describe(channel="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏≠‡∏ó")
async def set_setup_channel(interaction: discord.Interaction, channel: discord.TextChannel):
    if not interaction.user.guild_permissions.manage_guild:
        await interaction.response.send_message("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Manage Server", ephemeral=True)
        return
    
    config["setup_channel_id"] = channel.id
    save_config()
    await interaction.response.send_message(
        f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ã‡πá‡∏ï‡∏ö‡∏≠‡∏ó‡πÄ‡∏õ‡πá‡∏ô {channel.mention}",
        ephemeral=True
    )

@tree.command(name="set_auction_channel", description="‡∏ï‡∏±‡πâ‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•")
@app_commands.describe(channel="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•")
async def set_auction_channel(interaction: discord.Interaction, channel: discord.TextChannel):
    if not interaction.user.guild_permissions.manage_guild:
        await interaction.response.send_message("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Manage Server", ephemeral=True)
        return
    
    config["auction_channel_id"] = channel.id
    save_config()
    await interaction.response.send_message(
        f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô {channel.mention}",
        ephemeral=True
    )

@tree.command(name="‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á", description="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô)")
async def decorate(interaction: discord.Interaction):
    if config["setup_channel_id"] and interaction.channel.id != config["setup_channel_id"]:
        await interaction.response.send_message(
            "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ã‡πá‡∏ï‡∏ö‡∏≠‡∏ó‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
            ephemeral=True
        )
        return
    
    await interaction.response.send_modal(BasicInfoModal())

@tree.command(name="‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°", description="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞ footer")
async def decorate_extra(interaction: discord.Interaction):
    if config["setup_channel_id"] and interaction.channel.id != config["setup_channel_id"]:
        await interaction.response.send_message(
            "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ã‡πá‡∏ï‡∏ö‡∏≠‡∏ó‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
            ephemeral=True
        )
        return
    
    if not draft["title"]:
        await interaction.response.send_message(
            "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ `/‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á` ‡∏Å‡πà‡∏≠‡∏ô",
            ephemeral=True
        )
        return
    
    await interaction.response.send_modal(ImageModal())

@tree.command(name="‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á", description="‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Embed ‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•")
async def preview(interaction: discord.Interaction):
    if not draft["title"]:
        await interaction.response.send_message(
            "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• ‡πÉ‡∏ä‡πâ `/‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á` ‡∏Å‡πà‡∏≠‡∏ô",
            ephemeral=True
        )
        return
    
    await interaction.response.send_message(
        embed=build_embed_preview(),
        ephemeral=True
    )

@tree.command(name="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•", description="‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•")
async def start_auction(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.manage_guild:
        await interaction.response.send_message("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Manage Server", ephemeral=True)
        return
    
    if not config["auction_channel_id"]:
        await interaction.response.send_message(
            "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• ‡πÉ‡∏ä‡πâ `/set_auction_channel` ‡∏Å‡πà‡∏≠‡∏ô",
            ephemeral=True
        )
        return
    
    if not draft["title"] or not draft["description"] or not draft.get("end_time"):
        await interaction.response.send_message(
            "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö ‡πÉ‡∏ä‡πâ `/‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á` ‡∏Å‡πà‡∏≠‡∏ô",
            ephemeral=True
        )
        return
    
    channel = bot.get_channel(config["auction_channel_id"])
    
    # Create embed
    embed = discord.Embed(
        title=draft["title"],
        description=draft["description"],
        color=draft["color"]
    )
    
    if draft.get("thumbnail"):
        embed.set_thumbnail(url=draft["thumbnail"])
    if draft.get("image"):
        embed.set_image(url=draft["image"])
    if draft.get("footer"):
        embed.set_footer(text=draft["footer"])
    
    embed.add_field(
        name="üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡∏≥",
        value=f"{draft['min_bid']:,} ‡∏ö‡∏≤‡∏ó (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏ô‡∏≠)",
        inline=False
    )
    embed.add_field(
        name="‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î",
        value=f"<t:{int(draft['end_time'].timestamp())}:F> (<t:{int(draft['end_time'].timestamp())}:R>)",
        inline=False
    )
    
    # Send message
    msg = await channel.send(embed=embed, view=AuctionView())
    
    # Store auction data
    auctions[msg.id] = {
        "item": draft["title"],
        "highest_bid": draft["min_bid"],
        "highest_user": "-",
        "highest_user_id": None,
        "min_bid": draft["min_bid"],
        "end_time": draft["end_time"],
        "channel_id": channel.id,
        "color": draft["color"]
    }
    save_auctions()
    
    # Start timer
    bot.loop.create_task(auction_timer(msg.id))
    
    await interaction.response.send_message(
        f"‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô {channel.mention}\n"
        f"‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: <t:{int(draft['end_time'].timestamp())}:R>",
        ephemeral=True
    )

# -------- Auction Timer --------
async def auction_timer(msg_id):
    """‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏à‡∏ö ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞"""
    if msg_id not in auctions:
        return
    
    auction = auctions[msg_id]
    remaining = (auction["end_time"] - datetime.now(timezone.utc)).total_seconds()
    
    if remaining > 0:
        await asyncio.sleep(remaining)
    
    # Get channel and announce winner
    channel = bot.get_channel(auction["channel_id"])
    if not channel:
        return
    
    if auction["highest_user"] == "-":
        await channel.send(
            f"‚è∞ **‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• \"{auction['item']}\" ‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß!**\n"
            f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤"
        )
    else:
        await channel.send(
            f"üéâ **‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• \"{auction['item']}\" ‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß!**\n"
            f"üèÜ ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞: {auction['highest_user']}\n"
            f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: **{auction['highest_bid']:,} ‡∏ö‡∏≤‡∏ó**"
        )
    
    # Remove from active auctions
    try:
        del auctions[msg_id]
        save_auctions()
    except KeyError:
        pass

# -------- On Ready --------
@bot.event
async def on_ready():
    print(f"‚úÖ Logged in as {bot.user}")
    
    # Load saved data
    load_config()
    load_auctions()
    
    # Add persistent view
    bot.add_view(AuctionView())
    
    # Restart timers for active auctions
    for msg_id, auction in list(auctions.items()):
        if auction["end_time"] > datetime.now(timezone.utc):
            bot.loop.create_task(auction_timer(msg_id))
            print(f"‚ôªÔ∏è Restarted timer for auction {msg_id}")
        else:
            # Already expired, clean up
            del auctions[msg_id]
    
    save_auctions()
    
    # Sync commands
    try:
        synced = await bot.tree.sync()
        print(f"‚úÖ Synced {len(synced)} slash commands")
    except Exception as e:
        print(f"‚ùå Sync error: {e}")

# -------- Run Bot --------
if __name__ == "__main__":
    TOKEN = os.environ.get("DISCORD_BOT_TOKEN")
    if not TOKEN:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö DISCORD_BOT_TOKEN!")
        print("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment variable ‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó")
    else:
        bot.run(TOKEN)
